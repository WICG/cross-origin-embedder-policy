<pre class='metadata'>
Title: Cross-Origin Embedder Policy
Shortname: coep
Level: 1
Status: DREAM
Editor: Mike West 56384, Google Inc., mkwst@google.com
Markup Shorthands: markdown yes
!Version History: <a href="[REPOSITORYURL]">[REPOSITORY]</a>
Issue Tracking: whatwg/html topic: cross-origin-embedder-policy https://github.com/whatwg/html/labels/topic%3A%20cross-origin-embedder-policy
Boilerplate: repository-issue-tracking off
Abstract:
    In order to support interesting and powerful APIs in a post-Spectre world, it seems necessary
    to ensure that resoures are only voluntarily embedded into a potentially-dangerous context.
    This document sketches out a potential opt-in mechanism which relies upon explicit declaration
    of a `Cross-Origin-Resource-Policy` for each embedded resource, defined as a series of
    monkey-patches against HTML and Fetch which are intended to be upstreamed.
</pre>
<pre boilerplate="copyright">&copy;2019, Google, Inc. All rights reserved.</pre>

<pre class="biblio">
{
  "spectre": {
    "authors": [
      "Paul Kocher", "Jann Horn", "Anders Fogh", "Daniel Genkin", "Daniel Gruss", "Werner Haas", "Mike Hamburg", "Moritz Lipp", "Stefan Mangard", "Thomas Prescher", "Michael Schwarz", "Yuval Yarom"
    ],
    "href": "https://spectreattack.com/spectre.pdf",
    "title": "Spectre Attacks: Exploiting Speculative Execution"
  },

  "chromium-post-spectre-rethink": {
    "authors": [ "The Chromium Project" ],
    "href": "https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md",
    "title": "Post-Spectre Threat Model Re-Think"
  },

  "I-D.ietf-httpbis-header-structure": {
    "authors": [ "Mark Nottingham", "Poul-Henning Kamp" ],
    "href": "https://tools.ietf.org/html/draft-ietf-httpbis-header-structure",
    "title": "Structured Headers for HTTP",
    "status": "ID",
    "publisher": "IETF"
  }
}
</pre>

<pre class="anchors">
urlPrefix: https://tc39.es/ecma262/; spec: ECMAScript
    text: SharedArrayBuffer; type: interface; url: sec-sharedarraybuffer-objects
urlPrefix: https://tools.ietf.org/html/draft-ietf-httpbis-header-structure; spec: I-D.ietf-httpbis-header-structure
    type: dfn
        text: structured header; url: #
    for: structured header
        type: dfn
            text: dictionary; url: #section-3.1
            text: token; url: #section-3.9
            text: boolean; url: #section-3.11
    type: grammar
        text: sh-token; url: #section-3.9
    type: abstract-op
        text: serialize Structured Header; url: #section-4.1
        text: Structured Header parsing algorithm; url: #section-4.2.7
urlPrefix: https://html.spec.whatwg.org/
    type: dfn
        text: top-level browsing context group; url: multipage/browsers.html#tlbc-group
    type: abstract-op
        text: initialize the Document object; url: multipage/browsing-the-web.html#initialise-the-document-object
        text: create a new browsing context; url: multipage/browsers.html#creating-a-new-browsing-context
        text: run a worker; url: multipage/workers.html#run-a-worker
        text: process a navigate response; url: multipage/browsing-the-web.html#process-a-navigate-response
</pre>

<pre class="link-defaults">
spec:fetch; type:dfn; for:/; text:request
spec:fetch; type:dfn; text: cors check
spec:url; type:dfn; for:/; text:url
spec:html; type:dfn; for:/; text:browsing context
spec:html; type:dfn; text:environment
spec:html; type:dfn; text: browsing context group
spec:fetch; type:dfn; for:/; text:response
spec:fetch; type:dfn; for:/; text:cross-origin resource policy check
spec:html; type:dfn; for:/; text:global object
spec:html; type:dfn; for:/; text:container document
</pre>

Introduction {#intro}
=====================

The same-origin policy's restrictions against direct access to another origin's resources is,
unfortunately, insufficient in the face of speculative execution attacks like [[spectre]]. Merely
_loading_ another origins' resource may be enough to bring its content into a memory space which
may be probed by an attacker, even if the browser would otherwise prevent access to the resource
through explicit channels.

Given this context, user agents are rethinking the threat model under which they operate (e.g.
[[chromium-post-spectre-rethink]]). It would be unfortunate indeed to prevent the web platform from
legitimately using APIs like {{SharedArrayBuffer}} that accidentally improve attackers' ability to
exploit speculation attacks, but at the same time, many user agents have agreed that it seems
unreasonable to enable those APIs without additional mitigation.

The approach sketched out in this document tackles one piece of the broader problem by giving
developers the ability to require an explicit opt-in from any resource which would be embedded in
a given context. User agents can make that requirement a precondition for some APIs that might
otherwise leak data about cross-origin resources, which goes some way towards ensuring that any
leakage is voluntary, not accidental.

To that end, this proposal does three things:

1.  It introduces a new `cross-origin` value for the <a http-header>`Cross-Origin-Resource-Policy`</a>
    HTTP response header, which constitutes an explicit declaration that a given resource may be
    embedded in cross-origin contexts.

2.  It introduces a new `Cross-Origin-Embedder-Policy` header which shifts the default behavior for
    resources loaded in a given context to an opt-in model, in which cross-origin responses must
    either assert a <a http-header>`Cross-Origin-Resource-Policy`</a> header which allows the
    embedding, or pass a [=CORS check=].

3.  It extends <a http-header>`Cross-Origin-Resource-Policy`</a> to handle some <a>navigation
    requests</a> in order to deal reasonably with <{iframe}> embeddings and
    {{Window/open|window.open()}}.

Together, these would allow a user agent to gate access to interesting APIs (like the aforementioned
{{SharedArrayBuffer}}) on a top-level context opting-into `Cross-Origin-Embedder-Policy`, which in
turn gives servers the ability to inspect incoming requests and make reasonable decisions about
when to allow an embedding.

The rest of this document monkey-patches [[HTML]] and [[Fetch]] in order to document the details of
the bits and pieces discussed above.


Framework {#framework}
======================

The `Cross-Origin-Embedder-Policy` HTTP Response Header {#COEP}
----------------------------------------------------------------

The <dfn http-header>`Cross-Origin-Embedder-Policy`</dfn> HTTP response header field allows a
server to declare an embedder policy for a given document. It is a [=Structured Header=] whose
value MUST be a [=structured header/token=]. [[!I-D.ietf-httpbis-header-structure]] Its ABNF is:

```
Cross-Origin-Embedder-Policy = sh-item
```

The `Cross-Origin-Embedder-Policy` value consists of one token (either "`require-corp`" or
"`unsafe-none`") which may have a parameter specifying an endpoint for violation reporting.

In order to support forward-compatibility with as-yet-unknown request types, user agents MUST ignore
this header if it contains an invalid value. Likewise, user agents MUST ignore this header if the
value cannot be parsed as a <a grammar>`sh-token`</a>.


Parsing {#parsing}
------------------

<div algorithm="parsing the header">
To <dfn abstract-op local-lt="parse header">obtain a response's embedder policy</dfn> given a
[=response=] (|response|):

1.  Let |header| be the result of [=header list/getting=] `Cross-Origin-Embedder-Policy` from
    |response|'s [=response/header list=].

2.  If |header| is `null`, then return a new [=/embedder policy=].

3.  Set |header| to the result of [=isomorphic decoding=] |header|.

4.  Let |parsed item| be the result of executing the [$Structured Header parsing algorithm$]
    with <var ignore>input_string</var> set to |header|, and <var ignore>header_type</var> set
    to "`item`".

    If parsing fails, then return a new [=/embedder policy=].

    ISSUE(httpwg/http-extensions#662): The ASCII requirements of Structured Headers are
    somewhat unclear to me. Do we need to check whether |header| is an [=ASCII string=] before
    passing it into the parsing algorithm?

5.  Let |value| be the first component of |parsed item|.

6.  Let |parameters| be the second component of |parsed item|.

7.  If |value| is neither "`require-corp`" nor "`unsafe-none`", then return a new
    [=/embedder policy=].

8.  Let |endpoint| be `null`.

9.  For each |name| with a value of |value| in |parameters:

    1. If |name| is "`report-to`", then set |endpoint| to |value|.

10. Return a new [=/embedder policy=] whose [=embedder policy/value] is |value| and whose
    [=embedder/reporting endpoint=] is |endpoint|.

<div class="note">
Note: This fails open (by defaulting to "`unsafe-none`") in the presence of a header that cannot be
parsed as a [=structured header/token=]. This includes inadvertant lists created by combining
multiple instances of the `Cross-Origin-Embedder-Policy` header present in a given response:

<table class="data">
  <thead>
    <tr>
      <th>`Cross-Origin-Embedder-Policy`</th>
      <th>Final Policy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>No header delivered</em></td>
      <td>`unsafe-none`</td>
    </tr>
    <tr>
      <td>`require-corp`</td>
      <td>`require-corp`</td>
    </tr>
    <tr>
      <td>`unknown-value`</td>
      <td>`unsafe-none`</td>
    </tr>
    <tr>
      <td>`require-corp, unknown-value`</td>
      <td>`unsafe-none`</td>
    </tr>
    <tr>
      <td>`unknown-value, unknown-value`</td>
      <td>`unsafe-none`</td>
    </tr>
    <tr>
      <td>`unknown-value, require-corp`</td>
      <td>`unsafe-none`</td>
    </tr>
    <tr>
      <td>`require-corp, require-corp`</td>
      <td>`unsafe-none`</td>
    </tr>
  </tbody>
</table>
</div>

</div>


Integrations {#integrations}
============================

Integration with HTML {#integration-html}
-----------------------------------------

When creating a document, user agents will process
<a http-header>`Cross-Origin-Embedder-Policy`</a> headers delivered by the server, imposing any
restrictions it asserts. Likewise, user agents MUST also take into account the embedder policy
asserted by the document's opener or embedder, ensuring that they're properly imposed as well. To do
so, HTML is patched as follows:

1.  An <dfn>embedder policy</dfn> consists of:

    1.  A string (<dfn for="embedder policy">value</dfn>) with one of the following values:
        "`unsafe-none`", "`require-corp`", initially "`unsafe-none`".

    1.  A nullable string (<dfn for="embedder plicy">reporting endpoint</dfn>), initially null.

2.  The [=/embedder policy=] is persisted on a number of objects:

    1.  {{Document}} objects are given an <dfn for="document">embedder policy</dfn> property, whose
        value is an [=/embedder policy=].

    2.  {{WorkerGlobalScope}} objects are given a <dfn for="WorkerGlobalScope">embedder
        policy</dfn> property, whose value is an [=/embedder policy=].

    3.  [=Environment settings objects=] are given a <dfn for="environment settings object">embedder
        policy</dfn> accessor, which has the following implementations:

        :   For {{Window}} objects:
        ::  Return the [=document/embedder policy=] of <var ignore>window</var>'s
            [=associated Document=].
        :   For {{WorkerGlobalScope}} objects:
        ::  Return <var ignore>worker global scope</var>'s [=WorkerGlobalScope/embedder policy=].

3.  The [$create a new browsing context$] algorithm sets the [=document/embedder policy=] for
    a browsing context's initial `about:blank` document by adding a new step directly after Referrer
    Policy is initialized in step 11 of the existing algorithm  which will copy any
    <var ignore>creator</var> document's policy:

        > 12.  If <var ignore>creator</var> is not null, set <var ignore>document</var>'s
        >      [=document/embedder policy=] to <var ignore>creator</var>
        >      [=document/embedder policy=].

4.  The [$initialize the Document object$] algorithm sets the [=document/embedder policy=] for
    {{Document}}s to which a [=browsing context=] is navigated by adding a new step directly after
    Referrer Policy is initialized in step 6:

    > 7.  Let <var ignore>document</var>'s [=document/embedder policy=] be the result of
    >     [$parse header|obtaining an embedder policy$] from |response|.

5.  The [$run a worker$] algorithm sets the [=WorkerGlobalScope/embedder policy=] for
    {{WorkerGlobalScope}} objects by adding a new step directly after Referrer Policy is initialized
    in step 12.5:

    > 6.  Call [$initialize a global object's embedder policy from a response$] given
    >     <var ignore>worker global scope</var> and <var ignore>response</var>.

6.  The [$process a navigate response$] algorthm checks that documents nested in a `require-corp`
    context themselves positively assert `require-corp` by adding a new condition to the list in
    step 1:

    > *   The [$process navigation response|check a navigation response's adherence to its
    >     embedder's policy$] algorithm returns "`Blocked`" when executed upon
    >     <var ignore>response</var> and <var ignore>browsingContext</var>.


### Initializing a global object's Embedder policy ### {#initialize-embedder-policy-for-global}

<div algorithm="to initialize a global object's embedder policy from a response">
To <dfn abstract-op>initialize a global object's embedder policy from a response</dfn>, given a
[=global object=] (|global|) and a [=response=] (|response|):

1.  Let |policy| be a new [=/embedder policy=].

2.  Let |response policy| be the result of [$parse header|obtaining an embedder policy$] from
    |response|.

3.  Run the steps corresponding to the first matching statement:

    :   |response|'s [=response/url=]'s [=url/scheme=] is a [=local scheme=]
    :   |global| is a {{DedicatedWorkerGlobalScope}}:
    ::  1.  For each of the items in |global|'s [=WorkerGlobalScope/owner set=]:

            1.  If the item's [=/embedder policy=]'s [=embedder policy/value] is "`require-corp`",
                then set |policy|'s [=embedder policy/value] to "`require-corp`".

            1.  If |policy|'s [=embedder policy/reporting endpoint] is `null` and the item's
                [=embedder policy/reporting endpoint=] is non-null, then |policy|'s
                [=embedder policy/reporting endpoint=] to the item's
                [=embedder policy/reporting endpoint=].

    :   |global| is a {{SharedWorkerGlobalScope}}:
    :   |global| is a {{ServiceWorkerGlobalScope}}:
    ::  1.   Set |policy| to |response policy|.

4.  Set |global|'s [=WorkerGlobalScope/embedder policy=] to |policy|.

</div>

### Process a navigation response ### {#process-navigation-response}

<div algorithm="process a navigation response">
If a document's [=document/embedder policy=] is "`require-corp`", then any document it embeds in a
[=nested browsing context=] must positively assert a "`require-corp`" [=/embedder policy=] (see
[[#cascade-vs-require]]).

To <dfn abstract-op lt="process navigation response">check a navigation response's adherence to its
embedder's policy</dfn> given a [=response=] (|response|), and a target [=browsing context=]
(|target|), execute the following steps, which will return "`Allowed`" or "`Blocked`" as
appropriate:

1.  Let |response policy| be the result of [$parse header|obtaining an embedder policy$] from
    |response|.

2.  Return "`Allowed`" if any of the following statements are true:

    *   |target| is not a [=child browsing context=].
    *   |target|'s [=container document=]'s [=document/embedder policy=] is "`unsafe-none`".
    *   |response policy|'s [=embedder policy/value=] is "`require-corp`".

3.  Return "`Blocked`".

</div>

Integration with Fetch {#integration-fetch}
-------------------------------------------

When fetching resources, user agents should examine both the [=request=]'s [=request/client=] and
[=request/reserved client=] to determine the applicable [=/embedder policy=], and apply any constraints that policy expresses
to incoming responses. To do so, Fetch is patched as follows:

1.  The `Cross-Origin-Resource-Policy` grammar is extended to include a "`cross-origin`" value.

2.  The [$cross-origin resource policy check$] is rewritten to take the [=/embedder policy=] into
    account, and to cover some [=navigation requests=] in addition to `no-cors` requests.

### Cross-Origin Resource Policy Checks ### {#corp-check}

To perform a <dfn abstract-op>cross-origin resource policy check</dfn> given a [=request=]
(|request|) and a [=response=] (|response|), run these steps:

1.  Let |embedder policy| be "`require-corp`".

2.  Set |embedder policy| to "`unsafe-none`" if both of the following statements are true:

    *    |request|'s [=request/client=]'s [=environment settings object/embedder policy=]'s
         [=embedder policy/value=] is "`unsafe-none`".
    *    |request|'s [=request/reserved client=] is not `null`, and its
         [=environment settings object/embedder policy=] is "`unsafe-none`".


3.  Return `allowed` if any of the following statements are true:

    *    |request|'s [=request/mode=] is "`same-origin`", "`cors`", or "`websocket`".
    *    |request|'s [=request/mode=] is "`navigate`", and |embedder policy| is "`unsafe-none`".

4.  ASSERT: |request|'s [=request/mode=] is "`no-cors`" or "`navigate`". If |request|'s
    [=request/mode=] is "`navigate`", |embedder policy| is "`require-corp`".

5.  Let |policy| be the result of [=header list/getting=] `Cross-Origin-Resource-Policy` from
    |response|'s [=response/header list=].

6.  If |policy| is `null`, and |embedder policy| is "`require-corp`", set |policy| to
    "`same-origin`".

7.  Switch on |policy| and run the associated steps:

    :   `null`
    :   `cross-origin`
    ::  Return `allowed`.

    :   `same-origin`
    ::  If |request|'s [=request/origin=] is [=same origin=] with |request|'s
        [=request/current URL=]'s [=url/origin=], then return `allowed`.

        Otherwise, return `blocked`.

    :   `same-site`
    ::  If both of the following statements are true, then return `allowed`:

        *   |request|'s [=request/origin=]'s [=origin/host=] is [=same site=] with |request|'s
            [=request/current URL=]'s [=url/origin=]'s [=origin/host=].
        *   |request|'s [=request/origin=]'s [=origin/scheme=] is "`https`", or |response|'s
            [=response/HTTPS state=] is "`none`".

        Otherwise, return `blocked`.

        Note: `Cross-Origin-Resource-Policy: same-site` does not consider a response delivered
        via a secure transport to match a non-secure requesting origin, even if their hosts are
        otherwise [=same site=]. Securely-transported responses will only match a
        securely-transported initiator.

    :   Otherwise
    ::  Return `allowed`.

        ISSUE: Anne suggested that we ought to fail closed instead in the presence of COEP in
        [a comment on the relevant PR](https://github.com/whatwg/fetch/pull/893#discussion_r274867414).
        That seems reasonable to me, if we can get some changes into CORP along the lines of
        [whatwg/fetch#760](https://github.com/whatwg/fetch/issues/760), as they seem like useful
        extensions, and I think it'll be more difficult to ship them after inverting the
        error-handling behavior.

Integration with Service Worker {#integration-sw}
-------------------------------------------------

In https://w3c.github.io/ServiceWorker/#dom-fetchevent-respondwith, replace 10.1 with the following
item.

1.  If |response| is not a `Response` object, or the result of performing a
    [$cross-origin resource policy check$] with _event_'s request's associated request and
    _response_'s associated response is `blocked`, then set the respond-with-error flag.

Also add the following note.

The [$cross-origin resource policy check$] performed here ensures that a Service Worker
cannot respond to a client that requires CORP with an opaque response that doesn't assert CORP.

Implementation Considerations {#impl-considerations}
====================================================

Why not require CORS instead? {#why-not-cors}
---------------------------------------------

An earlier version of this propsal leaned on CORS rather than CORP. Why didn't we run with that
model instead?

This proposal posits that there's a meaningful distinction between a server's assertions that "You,
vague acquaintance, may embed me." and "You, dearest friend, may read me."
`Cross-Origin-Resource-Policy` grants no explicit access to a resources' content, unlike CORS, and
seems like it's just good-enough to support the explicit declaration of embeddableness that this
proposal requires. CORS goes further, and especially in the short-term it seems that there's real
risk in developers blindly enabling CORS in order to meet the embedding requirements we want to
impose here, opening themselves up to direct attack in the process.

That is, it seems likely that some subset of developers would implement a CORS requirement in the
simplest way possible, by reflecting the `Origin` header in an `Access-Control-Allow-Origin` header.
If these resources contain interesting data about users (as advertisements, for example, are wont to
do), then it's possible that data will end up being more widely available than expected.

CORP does not create the same risk. It seems strictly lower-privilege than CORS, and a reasonable
place for us to start.

Forward-compatibility {#forward-compat}
---------------------------------------

The header defined in this document is small and single-purpose, which is a real advantage for
comprehensibility. I wonder, however, if an extensible alternative would be reasonable. For
example, if we're serious about moving to credentialless requests, it would be annoying to do so by
defining yet another header. Perhaps something more generic that accepts a
[=structured header/dictionary=] rather than a single token? That is:

```
Embedee-Policy: opt-in=required, credentials=cors-only
```

Perhaps it will be possible to do everything we want by defining a new tokens, but I worry a bit
that we'll follow [[Referrer-Policy]] into some pretty convoluted token names if we go that route.
Splitting out the axes along which we'd like to make decisions seems like it might be a good
strategy to consider.

Cascading vs. requiring embedder policies {#cascade-vs-require}
---------------------------------------------------------------

An earlier version of this proposal called for a nested document's [=document/embedder policy=] to
be inherited from its parent. This would ensure that a document that asserted `require-corp` would
require its framed children to do the same.

We decided that this is the wrong model to start with. Instead, we now require the framed document
itself to assert `Cross-Origin-Embedder-Policy: require-corp`, and block the load if it doesn't.
That seems safer, insofar as it would give the embedder less control over the embedee's state. It
also ensures that the embedee's developer would always see consistent behavior in the given document
no matter whether its loaded as a frame or as a top-level document.

This might be a requirement we can relax in the future, as it does have potential implications for
eventual deployment. It makes sense to begin with the requirement, however, as loosening constraints
is significantly simpler than imposing new constraints in the future.
